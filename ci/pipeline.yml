---
resources:
- name: version
  type: semver
  source:
    driver: git
    initial_version: 0.0.0
    uri: ((concourse-git-url))
    branch: ((version))
    file: version
    private_key: ((concourse-git-private-key))

- name: config
  type: git
  source:
    uri: ((concourse-git-url))
    branch: ((config))
    paths:
    - "release-config.json"
    private_key: ((concourse-git-private-key))

- name: main
  type: git
  source:
    uri: ((concourse-git-url))
    branch: ((main))
    private_key: ((concourse-git-private-key))

- name: stable
  type: git
  source:
    uri: ((concourse-git-url))
    branch: ((stable))
    private_key: ((concourse-git-private-key))

- name: release
  type: git
  source:
    uri: ((concourse-git-url))
    branch: ((release-branch))
    private_key: ((concourse-git-private-key))

- name: release-base
  type: git
  source:
    uri: ((concourse-git-url))
    branch: ((release-branch))
    private_key: ((concourse-git-private-key))

jobs:
- name: start-release
  public: true
  serial_groups: [publish]
  plan:
  - get: config
    trigger: true
  - get: main
  - load_var: release-config
    file: config/release-config.json
    format: json
    reveal: true
  - get: version
    params: {bump: ((.:release-config.release-level))}
  - task: start
    file: main/ci/start/start.yml
  - load_var: branch-config
    file: branch/branch-config.json
  - put: version
    params: {bump: ((.:release-config.release-level))}
  - put: release-base
    params:
        repository: release
        branch: ((.:branch-config.release-branch-name))
  - set_pipeline: self
    file: release/ci/pipeline.yml
    vars:
        release-branch: "((.:branch-config.release-branch-name))"
    var_files: ["release/ci/vars.yml"]

- name: prepare-release
  public: true
  serial_groups: [publish]
  plan:
  - get: release
    trigger: true
  - get: version
    params: {pre: rc}
  - task: unit
    file: release/ci/unit/unit.yml
  - task: prepare
    file: release/ci/prepare/prepare.yml
    vars:
        release-branch: "((release-branch))"
  - put: release
    params:
        repository: release-out
        only_tag: true
  - put: version
    params: {pre: rc}

- name: release
  public: true
  serial_groups: [publish]
  plan:
  - get: config
  - get: release
    passed: [prepare-release]
  - get: version
    passed: [prepare-release]
    params: {bump: final}
  - load_var: release-config
    file: config/release-config.json
    format: json
    reveal: true
  - get: main
  - task: release
    file: release/ci/release/release.yml
    vars:
        release-branch: "((release-branch))"
  - put: main
    params:
        repository: main
  - put: release
    params:
        repository: release
        only_tag: true
  - put: version
    params: {bump: final}

- name: update-stable
  public: true
  serial_groups: [publish]
  plan:
  - get: stable
  - get: release
    passed: [release]
    trigger: true
    params:
        fetch_tags: true
  - get: version
    passed: [release]
  - task: update-stable
    file: release/ci/update/update.yml
    vars:
        release-branch: "((release-branch))"
  - put: stable
    params:
        repository: stable

- name: clean
  public: true
  serial_groups: [publish]
  plan:
  - get: release
    passed: [update-stable]
    params:
        fetch_tags: true
  - get: version
    passed: [update-stable]
  - task: clean
    file: release/ci/clean/clean.yml
    vars:
        release-branch: "((release-branch))"
  - put: release-base
    params:
        repository: release-out
        branch: "((release-branch))"
